From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoftikLord <dimap9986@gmail.com>
Date: Mon, 20 Mar 2023 16:22:15 +0500
Subject: [PATCH] Backport-Spigot-891-PR


diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 223afc7edc9e698c8cb72f0a54d51fc6a9549c12..b242e7f40b9f1679fa19b35a730c15e572e18d2f 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -5,6 +5,7 @@ import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.PriorityQueue;
+import java.util.function.IntUnaryOperator; // Paper - Backport Spigot-#891
 import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
@@ -44,11 +45,26 @@ import org.bukkit.scheduler.BukkitWorker;
  *     When executed from inside a synchronous method, the scheduler will be updated before next execution by virtue of the frequent {@link #parsePending()} calls.</li>
  */
 public class CraftScheduler implements BukkitScheduler {
-
+    // Paper start - Backport Spigot-#891
+    /**
+     * The start ID for the counter.
+     */
+    private static final int START_ID = 1;
+    /**
+     * Increment the {@link #ids} field and reset it to the {@link #START_ID} if it reaches {@link Integer#MAX_VALUE}
+     */
+    private static final IntUnaryOperator INCREMENT_IDS = previous -> {
+        // We reached the end, go back to the start!
+        if (previous == Integer.MAX_VALUE) {
+            return START_ID;
+        }
+        return previous + 1;
+    };
+    // Paper end
     /**
      * Counter for IDs. Order doesn't matter, only uniqueness.
      */
-    private final AtomicInteger ids = new AtomicInteger(1);
+    private final AtomicInteger ids = new AtomicInteger(START_ID); // Paper - Backport Spigot-#891
     /**
      * Current head of linked-list. This reference is always stale, {@link CraftTask#next} is the live reference.
      */
@@ -66,7 +82,7 @@ public class CraftScheduler implements BukkitScheduler {
                     int value = Long.compare(o1.getNextRun(), o2.getNextRun());
 
                     // If the tasks should run on the same tick they should be run FIFO
-                    return value != 0 ? value : Integer.compare(o1.getTaskId(), o2.getTaskId());
+                    return value != 0 ? value : Long.compare(o1.getCreatedAt(), o2.getCreatedAt()); // Paper - Backport Spigot-#891
                 }
             });
     /**
@@ -490,7 +506,14 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     private int nextId() {
-        return ids.incrementAndGet();
+        // Paper start - Backport Spigot-#891
+        Validate.isTrue(runners.size() < Integer.MAX_VALUE, "There are already " + Integer.MAX_VALUE + " tasks scheduled! Cannot schedule more.");
+        int id;
+        do {
+            id = ids.updateAndGet(INCREMENT_IDS);
+        } while (runners.containsKey(id)); // Avoid generating duplicate IDs
+        return id;
+        // Paper end
     }
 
     void parsePending() { // Paper
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 70252ef305b5e669d6312e23d4101689ca4b882c..13482ecd3db7929e4eb0e6c46433f3f3363b94ad 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -30,6 +30,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     public Timing timings; // Paper
     private final Plugin plugin;
     private final int id;
+    private final long createdAt = System.nanoTime(); // Paper - Backport Spigot-#891
 
     CraftTask() {
         this(null, null, CraftTask.NO_REPEATING, CraftTask.NO_REPEATING);
@@ -65,6 +66,12 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         } // Paper
     }
 
+    // Paper start - Backport Spigot-#891
+    long getCreatedAt() {
+        return createdAt;
+    }
+   // paper end
+
     long getPeriod() {
         return period;
     }
