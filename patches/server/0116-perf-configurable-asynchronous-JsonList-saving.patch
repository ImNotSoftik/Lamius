From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Thu, 14 Jul 2022 06:12:14 +0500
Subject: [PATCH] perf: configurable asynchronous JsonList saving


diff --git a/src/main/java/this/core/lamius/Lamius/LamiusConfig.java b/src/main/java/this/core/lamius/Lamius/LamiusConfig.java
index 93242e3c96bb130958b5e19388593b3cef2d3984..52ffaf61a741f17cf7481cc2bbc45577293cf2d2 100644
--- a/src/main/java/this/core/lamius/Lamius/LamiusConfig.java
+++ b/src/main/java/this/core/lamius/Lamius/LamiusConfig.java
@@ -269,4 +269,9 @@ public class LamiusConfig {
     private static void entityTrackerCheckY() {
         entityTrackerCheckY = getBoolean("entity-tracker-check-y", false);
     }
+
+    public static boolean saveJsonAsync;
+    private static void saveJsonAsync() {
+        saveJsonAsync = getBoolean("save-json-async", false);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/JsonList.java b/src/main/java/net/minecraft/server/JsonList.java
index 2a259758b5cf1fd66f5300036d0821c554e457a3..621dd6154238ab39b88a4df795a279f3fd9489c4 100644
--- a/src/main/java/net/minecraft/server/JsonList.java
+++ b/src/main/java/net/minecraft/server/JsonList.java
@@ -167,6 +167,8 @@ public class JsonList<K, V extends JsonListEntry<K>> {
     public void save() throws IOException {
         this.removeStaleEntries(); // Paper - remove expired values before saving
         
+        // Lamius start - Save json list async
+        Runnable runnable = () -> {
         Collection collection = this.d.values();
         String s = this.b.toJson(collection);
         BufferedWriter bufferedwriter = null;
@@ -174,9 +176,18 @@ public class JsonList<K, V extends JsonListEntry<K>> {
         try {
             bufferedwriter = Files.newWriter(this.c, StandardCharsets.UTF_8);
             bufferedwriter.write(s);
+        } catch (IOException ex) { // Lamius
+            JsonList.a.warn("Failed to save " + this.c, ex); // Lamius
         } finally {
             IOUtils.closeQuietly(bufferedwriter);
         }
+        };
+        if (this.core.lamius.Lamius.LamiusConfig.saveJsonAsync) {
+            MCUtil.scheduleAsyncTask(runnable);
+        } else {
+            runnable.run();
+        }
+        // Lamius end
 
     }
 
