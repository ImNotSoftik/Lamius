From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoftikLord <dimap9986@gmail.com>
Date: Sun, 9 Apr 2023 16:12:18 +0500
Subject: [PATCH] Paper-Backport-Fix-Bedorck-Breacking-Exploit


diff --git a/src/main/java/me/core/lamius/Lamius/LamiusConfig.java b/src/main/java/me/core/lamius/Lamius/LamiusConfig.java
index c87d3e8d14e9dab4b0d7637712cc8a0073f19ed8..5a4b3e1a39de981475afdb2e0137d2faaf132853 100644
--- a/src/main/java/me/core/lamius/Lamius/LamiusConfig.java
+++ b/src/main/java/me/core/lamius/Lamius/LamiusConfig.java
@@ -156,4 +156,20 @@ public class LamiusConfig {
         preventWorldBorderLag = getBoolean("fix-world-border-lag", true);
     }
 
+    public static boolean allowBlockPermanentBreakingExploits = false;
+    public static boolean allowBedrockBreaking = false;
+    public static boolean allowEndPortalFrameBreaking = false;
+    public static boolean allowEndPortalBreaking = false;
+    public static boolean allowEndGatewayBreaking = false;
+    public static boolean allowPistonExtensionCreating = false;
+
+    private static void allowBlockPermanentBreakingExploits() {
+        allowBlockPermanentBreakingExploits = getBoolean("allow-perm-block-break-exploits", allowBlockPermanentBreakingExploits);
+        allowBedrockBreaking = getBoolean("allow-bedrock-breaking", allowBedrockBreaking);
+        allowEndPortalFrameBreaking = getBoolean("allow-end-portal-frame-breaking", allowEndPortalFrameBreaking);
+        allowEndPortalBreaking = getBoolean("allow-end-portal-breaking", allowEndPortalBreaking);
+        allowEndGatewayBreaking = getBoolean("allow-end-gateway-breaking", allowEndGatewayBreaking);
+        allowPistonExtensionCreating = getBoolean("allow-piston-extension-creating", allowPistonExtensionCreating);
+    }
+
 }
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 3e2f52647c72f55cc3a624c05b86d2565b728038..c901bfa9998e313049c239f6fe995c762f2ce4ff 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -43,6 +43,13 @@ public class Block {
         }
         return timing;
     }
+    public final boolean isDestroyable() {
+        return me.core.lamius.Lamius.LamiusConfig.allowBlockPermanentBreakingExploits ||
+                (this != Blocks.BEDROCK || me.core.lamius.Lamius.LamiusConfig.allowBedrockBreaking) && (this != Blocks.END_PORTAL_FRAME || me.core.lamius.Lamius.LamiusConfig.allowEndPortalFrameBreaking) &&
+                        (this != Blocks.END_PORTAL || me.core.lamius.Lamius.LamiusConfig.allowEndPortalBreaking) &&
+                        (this != Blocks.END_GATEWAY || me.core.lamius.Lamius.LamiusConfig.allowEndGatewayBreaking) &&
+                        (this != Blocks.PISTON_EXTENSION || me.core.lamius.Lamius.LamiusConfig.allowPistonExtensionCreating); // try to prevent creation of headless pistons
+    }
     // Paper end
 
     public static int getId(Block block) {
@@ -535,7 +542,7 @@ public class Block {
 
     @Deprecated
     public EnumPistonReaction h(IBlockData iblockdata) {
-        return this.material.getPushReaction();
+        return !blockData.isDestroyable() ? EnumPistonReaction.BLOCK : this.material.getPushReaction(); // Paper
     }
 
     public void fallOn(World world, BlockPosition blockposition, Entity entity, float f) {
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index 0f90172fa015e74beb563d840f770e2bd9cbf434..bfbf1f99ac2370324c300ae82b10af89d8e206ef 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -12,6 +12,7 @@ import java.util.Iterator;
 import java.util.ListIterator;
 
 import com.google.common.collect.ImmutableList;
+import me.core.lamius.Lamius.LamiusConfig;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.event.block.BlockPistonRetractEvent;
 import org.bukkit.event.block.BlockPistonExtendEvent;
@@ -168,7 +169,12 @@ public class BlockPiston extends BlockDirectional {
 
     public boolean a(IBlockData iblockdata, World world, BlockPosition blockposition, int i, int j) {
         EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockPiston.FACING);
-
+        // Paper start - prevent retracting when we're facing the wrong way (we were replaced before retraction could occur)
+        EnumDirection directionQueuedAs = EnumDirection.fromType1(j & 7); // Paper - copied from below
+        if (!me.core.lamius.Lamius.LamiusConfig.allowBlockPermanentBreakingExploits && !LamiusConfig.allowPistonExtensionCreating && enumdirection != directionQueuedAs) {
+            return false;
+        }
+        // Paper end - prevent retracting when we're facing the wrong way
         if (!world.isClientSide) {
             boolean flag = this.a(world, blockposition, enumdirection);
 
@@ -221,7 +227,12 @@ public class BlockPiston extends BlockDirectional {
                     this.a(world, blockposition, enumdirection, false);
                 }
             } else {
-                world.setAir(blockposition.shift(enumdirection));
+                // Paper start - fix headless pistons breaking blocks
+                BlockPosition headPos = blockposition.shift(enumdirection);
+                if (me.core.lamius.Lamius.LamiusConfig.allowBlockPermanentBreakingExploits && LamiusConfig.allowPistonExtensionCreating || world.getType(headPos) == Blocks.PISTON_HEAD.getBlockData().set(FACING, enumdirection)) { // double check to make sure we're not a headless piston.
+                    world.setAir(headPos, false);
+                }
+            // Paper end - fix headless pistons breaking blocks
             }
 
             world.a((EntityHuman) null, blockposition, SoundEffects.ft, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 61fbdeb6ac55849552fa23f4fb5384e9dc375ebd..11b999756b3e96f6722fff7aeeddf896d51321b3 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -75,6 +75,7 @@ public class Explosion {
                         for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
                             BlockPosition blockposition = new BlockPosition(d4, d5, d6);
                             IBlockData iblockdata = this.world.getType(blockposition);
+                            if (!iblockdata.isDestroyable()) continue; // Paper
 
                             if (iblockdata.getMaterial() != Material.AIR) {
                                 float f2 = this.source != null ? this.source.a(this, this.world, blockposition, iblockdata) : iblockdata.getBlock().a((Entity) null);
@@ -252,7 +253,7 @@ public class Explosion {
                     this.world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, d3, d4, d5, new int[0]);
                 }
 
-                if (iblockdata.getMaterial() != Material.AIR) {
+                if (iblockdata.getMaterial() != Material.AIR && iblockdata.isDestroyable()) {
                     if (block.a(this)) {
                         // CraftBukkit - add yield
                         block.dropNaturally(this.world, blockposition, this.world.getType(blockposition), yield, 0);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 745f607e31a62b50c8a9872f9e10e9a43840ee13..d21fb0b043cc9a5fd28883334697251a0b8e904b 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -365,6 +365,10 @@ public abstract class World implements IBlockAccess {
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
+            // Paper start
+            IBlockData type = getType(blockposition);
+            if (!type.isDestroyable()) return false;
+            // Paper end
             BlockState blockstate = null;
             Iterator<BlockState> it = capturedBlockStates.iterator();
             while (it.hasNext()) {
