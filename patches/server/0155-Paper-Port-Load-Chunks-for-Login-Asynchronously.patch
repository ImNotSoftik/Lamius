From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoftikLord <dimap9986@gmail.com>
Date: Fri, 17 Mar 2023 15:54:17 +0500
Subject: [PATCH] Paper-Port-Load-Chunks-for-Login-Asynchronously


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 4a8205135958cc91026e78afe0b3c668b9937e68..3b39e770d11f9b514dd96a2d58a37c2c35df940e 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1356,7 +1356,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             this.lastYaw -= 360.0F;
         }
 
-        world.getChunkAt((int) Math.floor(this.locX) >> 4, (int) Math.floor(this.locZ) >> 4); // CraftBukkit
+        if (valid) world.getChunkAt((int) Math.floor(this.locX) >> 4, (int) Math.floor(this.locZ) >> 4); // CraftBukkit
         this.setPosition(this.locX, this.locY, this.locZ);
         this.setYawPitch(f, f1);
     }
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index b420367be57a93663bcb699a4a59793dda26b8c8..9dfc24d735eca64e4ef962df6eaa49a837a00c50 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -36,6 +36,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public String locale = null; // PAIL: private -> public // Paper - default to null
     public long lastSave = MinecraftServer.currentTick; // Paper
     public PlayerConnection playerConnection;
+    public NetworkManager networkManager; // Dionysus
     public final MinecraftServer server;
     public final PlayerInteractManager playerInteractManager;
     public double d;
@@ -157,6 +158,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public boolean sentListPacket = false;
     // CraftBukkit end
 
+    // Dionysus start
+    public boolean didPlayerJoinEvent = false;
+    // Dionysus end
+
     public EntityPlayer(MinecraftServer minecraftserver, WorldServer worldserver, GameProfile gameprofile, PlayerInteractManager playerinteractmanager) {
         super(worldserver, gameprofile);
         playerinteractmanager.player = this;
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 0b4d804bb2bee51d9de76ac1e66d0b352a1ba4de..55c6932bb490829c773a1c0406e8d5957a4bfdb1 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -69,7 +69,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
             }
             // Paper end
         } else if (this.g == LoginListener.EnumProtocolState.DELAY_ACCEPT) {
-            EntityPlayer entityplayer = this.server.getPlayerList().a(this.i.getId());
+            EntityPlayer entityplayer = this.server.getPlayerList().getActivePlayer(this.i.getId()); // Paper
 
             if (entityplayer == null) {
                 this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
@@ -169,7 +169,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
             }
 
             this.networkManager.sendPacket(new PacketLoginOutSuccess(this.i));
-            EntityPlayer entityplayer = this.server.getPlayerList().a(this.i.getId());
+            EntityPlayer entityplayer = this.server.getPlayerList().getActivePlayer(this.i.getId());
 
             if (entityplayer != null) {
                 this.g = LoginListener.EnumProtocolState.DELAY_ACCEPT;
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 07d8a84b706cb3ca2c5f153fadec781a7bc6c6ac..7bb013e025244de97a19265cdcf7603311b4a1c5 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -68,6 +68,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     private static final Logger LOGGER = LogManager.getLogger();
     public final NetworkManager networkManager;
     private final MinecraftServer minecraftServer;
+    Runnable playerJoinReady; // Dionysus
     public EntityPlayer player;
     private int e;
     private long f = getCurrentMillis(); private void setLastPing(long lastPing) { this.f = lastPing;}; private long getLastPing() { return this.f;}; // Paper - OBFHELPER - set ping to delay initial
@@ -152,45 +153,54 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     }
 
     public void e() {
-        this.syncPosition();
-        this.player.playerTick();
-        this.player.setLocation(this.l, this.m, this.n, this.player.yaw, this.player.pitch);
-        ++this.e;
-        this.processedMovePackets = this.receivedMovePackets;
-        if (this.B) {
-            if (++this.C > 80) {
-                PlayerConnection.LOGGER.warn("{} was kicked for floating too long!", this.player.getName());
-                this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickPlayerMessage); // Paper - use configurable kick message
-                return;
-            }
-        } else {
-            // this.B = false; // Lamius - Optimize
-            this.C = 0;
-        }
-
-        this.r = this.player.getVehicle();
-        if (this.r != this.player && this.r.bE() == this.player) {
-            this.s = this.r.locX;
-            this.t = this.r.locY;
-            this.u = this.r.locZ;
-            this.v = this.r.locX;
-            this.w = this.r.locY;
-            this.x = this.r.locZ;
-            if (this.D && this.player.getVehicle().bE() == this.player) {
-                if (++this.E > 80) {
-                    PlayerConnection.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName());
-                    this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickVehicleMessage); // Paper - use configurable kick message
+        // Dionysus start - login async
+        Runnable playerJoinReady = this.playerJoinReady;
+        if (playerJoinReady != null) {
+            this.playerJoinReady = null;
+            playerJoinReady.run();
+        }
+        if (this.player.valid) { // Dionysus end
+            this.syncPosition();
+            this.player.playerTick();
+            this.player.setLocation(this.l, this.m, this.n, this.player.yaw, this.player.pitch);
+            ++this.e;
+            this.processedMovePackets = this.receivedMovePackets;
+            if (this.B) {
+                if (++this.C > 80) {
+                    PlayerConnection.LOGGER.warn("{} was kicked for floating too long!", this.player.getName());
+                    this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickPlayerMessage); // Paper - use configurable kick message
                     return;
                 }
             } else {
+                this.B = false;
+                this.C = 0;
+            }
+
+            this.r = this.player.getVehicle();
+            if (this.r != this.player && this.r.bE() == this.player) {
+                this.s = this.r.locX;
+                this.t = this.r.locY;
+                this.u = this.r.locZ;
+                this.v = this.r.locX;
+                this.w = this.r.locY;
+                this.x = this.r.locZ;
+                if (this.D && this.player.getVehicle().bE() == this.player) {
+                    if (++this.E > 80) {
+                        PlayerConnection.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName());
+                        this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickVehicleMessage); // Paper - use configurable kick message
+                        return;
+                    }
+                } else {
+                    this.D = false;
+                    this.E = 0;
+                }
+            } else {
+                this.r = null;
                 this.D = false;
                 this.E = 0;
             }
-        } else {
-            this.r = null;
-            this.D = false;
-            this.E = 0;
-        }
+        } // Dionysus - end if
+
 
         // this.minecraftServer.methodProfiler.a("keepAlive"); // Lamius - Remove MethodProfiler
         // Paper Start - give clients a longer time to respond to pings as per pre 1.12.2 timings
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 9b4e9c96ca2d0f3bd33122ee034f9e0b1947d89e..a504eff47f02289c4c8a8f1fad18260f81bd5b1a 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -54,11 +54,12 @@ public abstract class PlayerList {
     private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
     private final MinecraftServer server;
     public final List<EntityPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
-    private final Map<UUID, EntityPlayer> j = Maps.newHashMap();
+    private final Map<UUID, EntityPlayer> j = Maps.newHashMap(); Map<UUID, EntityPlayer> getUUIDMap() { return j; } // Dionysus - OBFHELPER
     private final GameProfileBanList k;
     private final IpBanList l;
     private final OpList operators;
     private final WhiteList whitelist;
+    private final Map<UUID, EntityPlayer> pendingPlayers = Maps.newHashMap(); // Dionysus
     // CraftBukkit start
     // private final Map<UUID, ServerStatisticManager> o;
     // private final Map<UUID, AdvancementDataPlayer> p;
@@ -98,6 +99,11 @@ public abstract class PlayerList {
     }
 
     public void a(NetworkManager networkmanager, EntityPlayer entityplayer) {
+        EntityPlayer prev = pendingPlayers.put(entityplayer.getUniqueID(), entityplayer); // Dionysus
+        if (prev != null) {
+            disconnectPendingPlayer(prev);
+        }
+        entityplayer.networkManager = networkmanager;
         GameProfile gameprofile = entityplayer.getProfile();
         UserCache usercache = this.server.getUserCache();
         GameProfile gameprofile1 = usercache.a(gameprofile.getId());
@@ -146,7 +152,7 @@ public abstract class PlayerList {
 
         entityplayer.spawnIn(world);
         entityplayer.setPosition(loc.getX(), loc.getY(), loc.getZ());
-        entityplayer.setYawPitch(loc.getYaw(), loc.getPitch()); 
+        entityplayer.setYawPitch(loc.getYaw(), loc.getPitch());
         // Spigot end
 
         // CraftBukkit - Moved message to after join
@@ -169,6 +175,51 @@ public abstract class PlayerList {
         entityplayer.F().a(entityplayer);
         this.sendScoreboard((ScoreboardServer) worldserver.getScoreboard(), entityplayer);
         this.server.aD();
+        // Dionysus start - Backport async load spawning.
+        final int chunkX = loc.getBlockX() >> 4;
+        final int chunkZ = loc.getBlockZ() >> 4;
+        final String finalS = s;
+        final String finalS1 = s1;
+        worldserver.getChunkProviderServer().getChunkAt(chunkX, chunkZ, () -> {
+            // This should be loaded at this point and we should delay the unload
+            delayChunkUnload(worldserver, chunkX, chunkZ);
+            playerconnection.playerJoinReady = () -> {
+                // This should be loaded at this point and we should delay the unload
+                delayChunkUnload(worldserver, chunkX, chunkZ);
+                postChunkLoadJoin(entityplayer, networkmanager, playerconnection, nbttagcompound, finalS1, finalS);
+            };
+        });
+        // Dionysus end
+    }
+
+    private void delayChunkUnload(WorldServer worldserver, int chunkX, int chunkZ) {
+        Chunk chunk = worldserver.getChunkProviderServer().getChunkIfLoaded(chunkX, chunkZ);
+        if (chunk != null && chunk.scheduledForUnload != null) {
+            chunk.scheduledForUnload = null; // Delay chunk unloading
+        }
+    }
+
+    EntityPlayer getActivePlayer(UUID uuid) {
+        EntityPlayer player = this.getUUIDMap().get(uuid);
+        return player != null ? player : pendingPlayers.get(uuid);
+    }
+
+    void disconnectPendingPlayer(EntityPlayer entityplayer) {
+        if (entityplayer.networkManager != null) {
+            ChatMessage msg = new ChatMessage("multiplayer.disconnect.duplicate_login");
+            entityplayer.networkManager.sendPacket(new PacketPlayOutKickDisconnect(msg), (future) -> {
+                entityplayer.networkManager.close(msg);
+                entityplayer.networkManager = null;
+            });
+        }
+    }
+
+    private void postChunkLoadJoin(EntityPlayer entityplayer, NetworkManager networkmanager, PlayerConnection playerconnection, NBTTagCompound nbttagcompound, String s1, String s) {
+        pendingPlayers.remove(entityplayer.getUniqueID(), entityplayer);
+        if (!networkmanager.isConnected()) {
+            return;
+        }
+        entityplayer.didPlayerJoinEvent = true;
         // CraftBukkit start - login message is handled in the event
         // ChatMessage chatmessage;
 
@@ -185,7 +236,7 @@ public abstract class PlayerList {
         // this.sendMessage(chatmessage);
         this.onPlayerJoin(entityplayer, joinMessage);
         // CraftBukkit end
-        worldserver = server.getWorldServer(entityplayer.dimension);  // CraftBukkit - Update in case join event changed it
+        WorldServer worldserver = server.getWorldServer(entityplayer.dimension);  // CraftBukkit - Update in case join event changed it
         playerconnection.a(entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch);
         this.b(entityplayer, worldserver);
         if (!this.server.getResourcePack().isEmpty()) {
@@ -346,6 +397,7 @@ public abstract class PlayerList {
     }
 
     protected void savePlayerFile(EntityPlayer entityplayer) {
+        if (!entityplayer.didPlayerJoinEvent) return; // Dionysus
         entityplayer.lastSave = MinecraftServer.currentTick; // Paper
         this.playerFileData.save(entityplayer);
         ServerStatisticManager serverstatisticmanager = (ServerStatisticManager) entityplayer.getStatisticManager(); // CraftBukkit
@@ -481,7 +533,13 @@ public abstract class PlayerList {
             // this.p.remove(uuid);
             // CraftBukkit end
         }
-
+        // Paper start
+        entityplayer1 = pendingPlayers.get(uuid);
+        if (entityplayer1 == entityplayer) {
+            pendingPlayers.remove(uuid);
+        }
+        entityplayer.networkManager = null;
+        // Paper end
         // CraftBukkit start
         //  this.sendAll(new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER, new EntityPlayer[] { entityplayer}));
         PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, entityplayer);
@@ -501,7 +559,7 @@ public abstract class PlayerList {
         ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
         worldserver.getTracker().untrackPlayer(entityplayer); // Lamius - Attempt to reduce memory leakage
 
-        return playerQuitEvent.getQuitMessage(); // CraftBukkit
+        return entityplayer.didPlayerJoinEvent ? playerQuitEvent.getQuitMessage() : null; // CraftBukkit // Paper - don't print quit if we never printed join
     }
 
     // CraftBukkit start - Whole method, SocketAddress to LoginListener, added hostname to signature, return EntityPlayer
@@ -518,6 +576,13 @@ public abstract class PlayerList {
                 arraylist.add(entityplayer);
             }
         }
+        // Paper start - check pending players too
+        entityplayer = pendingPlayers.get(uuid);
+        if (entityplayer != null) {
+            this.pendingPlayers.remove(uuid);
+            disconnectPendingPlayer(entityplayer);
+        }
+        // Paper end
 
         Iterator iterator = arraylist.iterator();
 
