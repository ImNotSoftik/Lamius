From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ruViolence <78062896+ruViolence@users.noreply.github.com>
Date: Tue, 7 Jun 2022 18:57:38 +0500
Subject: [PATCH] perf: optimize chat component parsing

Fixes the book lag exploit caused by Bukkit when you can take a book filled with dot characters and call with it a lot of events, for example quickly moving from hand to hand.
Reduced lags in other parts of the server by using a more optimized alternative method for component parsing.
Added a new config option that enables alternative component parsing at all cases (currently does not support URL links parsing).

diff --git a/src/main/java/this/core/lamius/Lamius/LamiusConfig.java b/src/main/java/this/core/lamius/Lamius/LamiusConfig.java
index c061c98b809c6f99f00a2db0cb10a2d9aeee8548..a2ee722f5c23bcc9907edbf38659be1607f71d88 100644
--- a/src/main/java/this/core/lamius/Lamius/LamiusConfig.java
+++ b/src/main/java/this/core/lamius/Lamius/LamiusConfig.java
@@ -239,4 +239,9 @@ public class LamiusConfig {
     private static void disableVillages() {
         disableVillages = getBoolean("disable-villages", false);
     }
+
+    public static boolean alternativeChatComponentParser;
+    private static void alternativeChatComponentParser() {
+        alternativeChatComponentParser = getBoolean("alternative-chat-component-parser", false);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index 8913e2744eef5d27c954dabe13956673ff3c3e93..6353107bc122731a597131bbfaead2c507b2d7e8 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -209,7 +209,7 @@ public class AdvancementDataPlayer {
                 this.player.world.getServer().getPluginManager().callEvent(new org.bukkit.event.player.PlayerAdvancementDoneEvent(this.player.getBukkitEntity(), advancement.bukkit)); // CraftBukkit
                 advancement.d().a(this.player);
                 if (advancement.c() != null && advancement.c().i() && this.player.world.getGameRules().getBoolean("announceAdvancements")) {
-                    this.d.getPlayerList().sendMessage(new ChatMessage("chat.type.advancement." + advancement.c().e().a(), new Object[] { this.player.getScoreboardDisplayName(), advancement.j()}));
+                    this.d.getPlayerList().sendMessageFast(new ChatMessage("chat.type.advancement." + advancement.c().e().a(), new Object[] { this.player.getScoreboardDisplayName(), advancement.j()}), true); // Lamius
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/ChatModifier.java b/src/main/java/net/minecraft/server/ChatModifier.java
index 7ebe188e5972f90ccf2b2ac86c854822a27e52fe..507edfb72cacae4803870ca62509af671b0103ab 100644
--- a/src/main/java/net/minecraft/server/ChatModifier.java
+++ b/src/main/java/net/minecraft/server/ChatModifier.java
@@ -309,6 +309,21 @@ public class ChatModifier {
         return chatmodifier;
     }
 
+    // Lamius start
+    public void reset() {
+        this.a = null;
+        this.b = null;
+        this.c = null;
+        this.d = null;
+        this.e = null;
+        this.f = null;
+        this.g = null;
+        this.h = null;
+        this.i = null;
+        this.j = null;
+    }
+    // Lamius end
+
     public static class ChatModifierSerializer implements JsonDeserializer<ChatModifier>, JsonSerializer<ChatModifier> {
 
         public ChatModifierSerializer() {}
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 4be43502ba35fe8b45ac4a69f55691b510917de3..9fd71607d1031493ba90c23253955a52e65dff70 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -547,13 +547,13 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                     if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OTHER_TEAMS) {
                         this.server.getPlayerList().a((EntityHuman) this, chatmessage);
                     } else if (scoreboardteambase.getDeathMessageVisibility() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OWN_TEAM) {
-                        this.server.getPlayerList().b((EntityHuman) this, chatmessage);
+                        this.server.getPlayerList().sendMessageToTeamOrAllPlayersFast((EntityHuman) this, chatmessage); // Lamius
                     }
                 } else {
-                    this.server.getPlayerList().sendMessage(chatmessage);
+                    this.server.getPlayerList().sendMessageFast(chatmessage, true); // Lamius
                 }
             } else {
-                this.server.getPlayerList().sendMessage(org.bukkit.craftbukkit.util.CraftChatMessage.fromString(deathMessage));
+                this.server.getPlayerList().sendMessage(org.bukkit.craftbukkit.util.CraftChatMessage.fromStringFast(deathMessage)); // Lamius
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 7473ba226904b6965e5bd4cf6ba3395d342584a0..de67be18f4d267941d884bb118cca2487456c78a 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -380,7 +380,7 @@ public abstract class PlayerList {
         joinMessage = playerJoinEvent.getJoinMessage();
 
         if (joinMessage != null && joinMessage.length() > 0) {
-            for (IChatBaseComponent line : org.bukkit.craftbukkit.util.CraftChatMessage.fromString(joinMessage)) {
+            for (IChatBaseComponent line : org.bukkit.craftbukkit.util.CraftChatMessage.fromStringFast(joinMessage)) { // Lamius
                 server.getPlayerList().sendAll(new PacketPlayOutChat(line));
             }
         }
@@ -1461,6 +1461,32 @@ public abstract class PlayerList {
         this.sendMessage(ichatbasecomponent, true);
     }
 
+    // Lamius start - Sends a message bypassing CraftBukkit's component fixer
+    public void sendMessageToTeamOrAllPlayersFast(EntityHuman entityhuman, IChatBaseComponent ichatbasecomponent) {
+        ScoreboardTeamBase scoreboardteambase = entityhuman.aY();
+
+        if (scoreboardteambase == null) {
+            sendMessageFast(ichatbasecomponent, true);
+        } else {
+            List<EntityPlayer> entityPlayers = this.players;
+            for (int i = 0; i < entityPlayers.size(); i++) {
+                EntityPlayer entityplayer = entityPlayers.get(i);
+                if (entityplayer.aY() != scoreboardteambase) {
+                    entityplayer.sendMessage(ichatbasecomponent);
+                }
+            }
+
+        }
+    }
+
+    public void sendMessageFast(IChatBaseComponent ichatbasecomponent, boolean system) {
+        this.server.sendMessage(ichatbasecomponent);
+        ChatMessageType chatmessagetype = system ? ChatMessageType.SYSTEM : ChatMessageType.CHAT;
+
+        this.sendAll(new PacketPlayOutChat(ichatbasecomponent, chatmessagetype));
+    }
+    // Lamius end
+
     public ServerStatisticManager getStatisticManager(EntityPlayer entityhuman) {
         UUID uuid = entityhuman.getUniqueID();
         ServerStatisticManager serverstatisticmanager = uuid == null ? null : (ServerStatisticManager) entityhuman.getStatisticManager();
diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
index 3177ed30ded2b0cff28750cd93ffaa1f9dff889c..cfc96513dff82dfa3444429dac44eacdf8c5f8cb 100644
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -83,7 +83,7 @@ public class TileEntitySign extends TileEntity {
                 //IChatBaseComponent ichatbasecomponent = IChatBaseComponent.ChatSerializer.a(s); // Paper - move down - the old format might throw a json error
 
                 if (oldSign && !isLoadingStructure) { // Paper - saved structures will be in the new format, but will not have isConverted
-                    lines[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(s)[0];
+                    lines[i] = org.bukkit.craftbukkit.util.CraftChatMessage.fromStringFast(s)[0]; // Lamius
                     continue;
                 }
                 // CraftBukkit end
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
index 97b4e6910d0c5021dbc5fcbaad34b31ffd9274b2..3da230650c425737254d9f3103571ca92f8d2153 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
@@ -58,7 +58,7 @@ public class CraftSign extends CraftBlockEntityState<TileEntitySign> implements
 
         for (int i = 0; i < 4; i++) {
             if (i < lines.length && lines[i] != null) {
-                components[i] = CraftChatMessage.fromString(lines[i])[0];
+                components[i] = CraftChatMessage.fromStringFast(lines[i])[0]; // Lamius
             } else {
                 components[i] = new ChatComponentText("");
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index 76ed95523ad3ac1b2562ba5ff7275ca9a2d269e0..6557570e1c297d85b816b165fdd29a1e21fb62a9 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -31,7 +31,7 @@ public class CraftBossBar implements BossBar {
         this.style = style;
 
         handle = new BossBattleServer(
-                CraftChatMessage.fromString(title, true)[0],
+                CraftChatMessage.fromStringFast(title, true)[0], // Lamius
                 convertColor(color),
                 convertStyle(style)
         );
@@ -72,7 +72,7 @@ public class CraftBossBar implements BossBar {
 
     @Override
     public void setTitle(String title) {
-        handle.title = CraftChatMessage.fromString(title, true)[0];
+        handle.title = CraftChatMessage.fromStringFast(title, true)[0]; // Lamius
         handle.sendUpdate(PacketPlayOutBoss.Action.UPDATE_NAME);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index b989a65e684b2cc456e7c5f5388d40b654eb3ed9..ad40a68fc7255d7a2e154117750809937d55cc5f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -296,7 +296,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (name == null) {
             name = getName();
         }
-        getHandle().listName = name.equals(getName()) ? null : CraftChatMessage.fromString(name)[0];
+        getHandle().listName = name.equals(getName()) ? null : CraftChatMessage.fromStringFast(name)[0]; // Lamius
         for (EntityPlayer player : (List<EntityPlayer>)server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
                 player.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_DISPLAY_NAME, getHandle()));
@@ -1685,12 +1685,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().playerConnection.sendPacket(times);
 
         if (title != null) {
-            PacketPlayOutTitle packetTitle = new PacketPlayOutTitle(EnumTitleAction.TITLE, CraftChatMessage.fromString(title)[0]);
+            PacketPlayOutTitle packetTitle = new PacketPlayOutTitle(EnumTitleAction.TITLE, CraftChatMessage.fromStringFast(title)[0]); // Lamius
             getHandle().playerConnection.sendPacket(packetTitle);
         }
 
         if (subtitle != null) {
-            PacketPlayOutTitle packetSubtitle = new PacketPlayOutTitle(EnumTitleAction.SUBTITLE, CraftChatMessage.fromString(subtitle)[0]);
+            PacketPlayOutTitle packetSubtitle = new PacketPlayOutTitle(EnumTitleAction.SUBTITLE, CraftChatMessage.fromStringFast(subtitle)[0]); // Lamius
             getHandle().playerConnection.sendPacket(packetSubtitle);
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index ed2c281206041ca283c76a8ca98bc6779d827f3e..a32b77b85fbb51f5094617bca252a801a901c1e4 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -234,7 +234,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         String newText = text == null ? "" : text.length() > MAX_PAGE_LENGTH && !OVERRIDE_CHECKS ? text.substring(0, MAX_PAGE_LENGTH) : text;
-        pages.set(page - 1, CraftChatMessage.fromString(newText, true)[0]);
+        pages.set(page - 1, CraftChatMessage.fromStringFast(newText, true)[0]); // Lamius
     }
 
     public void setPages(final String... pages) {
@@ -255,7 +255,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
                 page = page.substring(0, MAX_PAGE_LENGTH);
             }
 
-            this.pages.add(CraftChatMessage.fromString(page, true)[0]);
+            this.pages.add(CraftChatMessage.fromStringFast(page, true)[0]); // Lamius
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
index 6cbcc9d30b410da36677a562d9c319b879909596..f834a41692a22628b5b9a34364ca5b81733952bf 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryWrapper.java
@@ -171,7 +171,7 @@ public class InventoryWrapper implements IInventory {
 
     @Override
     public IChatBaseComponent getScoreboardDisplayName() {
-        return CraftChatMessage.fromString(getName())[0];
+        return CraftChatMessage.fromStringFast(getName())[0]; // Lamius
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index b1bf0a35d7d114ddd1605b00386b11864ae37cbe..2c475eb1429b291ebf0bbeb43b489a39168f0163 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -69,7 +69,7 @@ public final class CraftChatMessage {
                 case 1:
                     EnumChatFormat format = formatMap.get(match.toLowerCase(java.util.Locale.ENGLISH).charAt(1));
                     if (format == EnumChatFormat.RESET) {
-                        modifier = new ChatModifier();
+                        modifier.reset(); // Lamius
                     } else if (format.isFormat()) {
                         switch (format) {
                         case BOLD:
@@ -91,7 +91,10 @@ public final class CraftChatMessage {
                             throw new AssertionError("Unexpected message format");
                         }
                     } else { // Color resets formatting
-                        modifier = new ChatModifier().setColor(format);
+                        // Lamius start
+                        modifier.reset();
+                        modifier.setColor(format);
+                        // Lamius end
                     }
                     break;
                 case 2:
@@ -123,9 +126,9 @@ public final class CraftChatMessage {
             if (index <= currentIndex) {
                 return;
             }
-            IChatBaseComponent addition = new ChatComponentText(message.substring(currentIndex, index)).setChatModifier(modifier);
+            IChatBaseComponent addition = new ChatComponentText(message.substring(currentIndex, index)).setChatModifier(modifier.clone()); // Lamius
             currentIndex = index;
-            modifier = modifier.clone();
+            // modifier = modifier.clone(); // Lamius
             if (currentChatComponent == null) {
                 currentChatComponent = new ChatComponentText("");
                 list.add(currentChatComponent);
@@ -139,13 +142,178 @@ public final class CraftChatMessage {
     }
 
     public static IChatBaseComponent[] fromString(String message) {
+        if (this.core.lamius.Lamius.LamiusConfig.alternativeChatComponentParser) return fromStringFast(message, false); // Lamius
         return fromString(message, false);
     }
     
     public static IChatBaseComponent[] fromString(String message, boolean keepNewlines) {
+        if (this.core.lamius.Lamius.LamiusConfig.alternativeChatComponentParser) return fromStringFast(message, keepNewlines); // Lamius
         return new StringMessage(message, keepNewlines).getOutput();
     }
     
+    // Lamius start
+    public static IChatBaseComponent[] fromStringFast(String message) {
+        return fromStringFast(message, false);
+    }
+
+    public static IChatBaseComponent[] fromStringFast(String message, boolean keepNewlines) {
+        IChatBaseComponent line = new ChatComponentText("");
+
+        List<IChatBaseComponent> list = null;
+        if (!keepNewlines) {
+            list = new ArrayList<>();
+            list.add(line);
+        }
+
+        char[] chars = message.toCharArray();
+        StringBuilder sb = new StringBuilder();
+        ChatModifier modifier = new ChatModifier();
+        boolean colorCharFound = false;
+        for (int i = 0; i < chars.length; i++) {
+            char c = chars[i];
+
+            { // Color parse
+                if (colorCharFound) {
+                    colorCharFound = false;
+                    EnumChatFormat format = getColorByCharFast(c);
+
+                    // If there is a wrong color style, for example "§x".
+                    // Just append that color construction and continue
+                    if (format == null) {
+                        sb.append('§').append(c);
+                        continue;
+                    }
+
+                    // Save previous text and reset StringBuilder
+                    if (sb.length() > 0) {
+                        if (!keepNewlines) {
+                            if (line == null) {
+                                line = new ChatComponentText("");
+                                list.add(line);
+                            }
+                        }
+                        line.addSibling(new ChatComponentText(sb.toString()).setChatModifier(modifier.clone()));
+                        sb.setLength(0);
+                    }
+
+                    if (format == EnumChatFormat.RESET) {
+                        modifier.reset();
+                    } else if (format.isFormat()) {
+                        switch (format) {
+                            case BOLD:
+                                modifier.setBold(Boolean.TRUE);
+                                break;
+                            case ITALIC:
+                                modifier.setItalic(Boolean.TRUE);
+                                break;
+                            case STRIKETHROUGH:
+                                modifier.setStrikethrough(Boolean.TRUE);
+                                break;
+                            case UNDERLINE:
+                                modifier.setUnderline(Boolean.TRUE);
+                                break;
+                            case OBFUSCATED:
+                                modifier.setRandom(Boolean.TRUE);
+                                break;
+                            default:
+                                throw new AssertionError("Unexpected message format");
+                        }
+                    } else { // Color resets formatting
+                        modifier.reset();
+                        modifier.setColor(format);
+                    }
+                    continue;
+                }
+
+                if (c == '§') {
+                    colorCharFound = true;
+                    continue;
+                }
+            }
+
+            if (!keepNewlines) {
+                if (c == '\n') { // New line break
+                    if (sb.length() > 0) {
+                        if (line == null) {
+                            line = new ChatComponentText("");
+                            list.add(line);
+                        }
+                        line.addSibling(new ChatComponentText(sb.toString()).setChatModifier(modifier.clone()));
+                        sb.setLength(0);
+                    }
+                    line = null;
+                    continue;
+                }
+            }
+
+            sb.append(c);
+        }
+
+        // Append a color symbol if it is at the end of a line
+        if (colorCharFound) {
+            sb.append('§');
+        }
+
+        if (sb.length() > 0) {
+            if (!keepNewlines) {
+                if (line == null) {
+                    line = new ChatComponentText("");
+                    list.add(line);
+                }
+            }
+            line.addSibling(new ChatComponentText(sb.toString()).setChatModifier(modifier));
+        }
+
+        // TODO: URL links parsing
+
+        if (!keepNewlines) {
+            return list.toArray(new IChatBaseComponent[list.size()]);
+        } else {
+            return new IChatBaseComponent[]{line};
+        }
+    }
+
+    private static EnumChatFormat getColorByCharFast(char c) {
+        switch (c) {
+            case '0': return EnumChatFormat.BLACK;
+            case '1': return EnumChatFormat.DARK_BLUE;
+            case '2': return EnumChatFormat.DARK_GREEN;
+            case '3': return EnumChatFormat.DARK_AQUA;
+            case '4': return EnumChatFormat.DARK_RED;
+            case '5': return EnumChatFormat.DARK_PURPLE;
+            case '6': return EnumChatFormat.GOLD;
+            case '7': return EnumChatFormat.GRAY;
+            case '8': return EnumChatFormat.DARK_GRAY;
+            case '9': return EnumChatFormat.BLUE;
+            case 'a':
+            case 'A': return EnumChatFormat.GREEN;
+            case 'b':
+            case 'B': return EnumChatFormat.AQUA;
+            case 'c':
+            case 'C': return EnumChatFormat.RED;
+            case 'd':
+            case 'D': return EnumChatFormat.LIGHT_PURPLE;
+            case 'e':
+            case 'E': return EnumChatFormat.YELLOW;
+            case 'f':
+            case 'F': return EnumChatFormat.WHITE;
+            case 'k':
+            case 'K': return EnumChatFormat.OBFUSCATED;
+            case 'l':
+            case 'L': return EnumChatFormat.BOLD;
+            case 'm':
+            case 'M': return EnumChatFormat.STRIKETHROUGH;
+            case 'n':
+            case 'N': return EnumChatFormat.UNDERLINE;
+            case 'o':
+            case 'O': return EnumChatFormat.ITALIC;
+            case 'r':
+            case 'R': return EnumChatFormat.RESET;
+            default: return null;
+        }
+    }
+    // Lamius end
+
     public static String fromComponent(IChatBaseComponent component) {
         return fromComponent(component, EnumChatFormat.BLACK);
     }
@@ -156,7 +324,11 @@ public final class CraftChatMessage {
         
         for (IChatBaseComponent c : (Iterable<IChatBaseComponent>) component) {
             ChatModifier modi = c.getChatModifier();
-            out.append(modi.getColor() == null ? defaultColor : modi.getColor());
+            // Lamius start
+            if (modi.getColor() != null && (out.length() > 0 || modi.getColor() != defaultColor)) {
+                out.append(modi.getColor());
+            }
+            // Lamius end
             if (modi.isBold()) {
                 out.append(EnumChatFormat.BOLD);
             }
@@ -174,7 +346,7 @@ public final class CraftChatMessage {
             }
             out.append(c.getText());
         }
-        return out.toString().replaceFirst("^(" + defaultColor + ")*", "");
+        return out.toString(); // Lamius
     }
 
     public static IChatBaseComponent fixComponent(IChatBaseComponent component) {
