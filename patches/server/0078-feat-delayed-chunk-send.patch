From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ruViolence <78062896+ruViolence@users.noreply.github.com>
Date: Fri, 27 May 2022 09:55:35 +0500
Subject: [PATCH] feat: delayed chunk send


diff --git a/src/main/java/this/core/lamius/Lamius/LamiusCommand.java b/src/main/java/this/core/lamius/Lamius/LamiusCommand.java
index 66099259d578cc6addd0342eba19ab2dac275bf9..7b40040a4222ec6a2eeeb7c94040efaf03ecb787 100644
--- a/src/main/java/this/core/lamius/Lamius/LamiusCommand.java
+++ b/src/main/java/this/core/lamius/Lamius/LamiusCommand.java
@@ -6,6 +6,8 @@ import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
 
 import java.io.File;
 import java.util.Collections;
@@ -17,14 +19,14 @@ public class LamiusCommand extends Command {
     public LamiusCommand(String name) {
         super(name);
         this.description = "Lamius related commands";
-        this.usageMessage = "/Lamius [reload]";
+        this.usageMessage = "/Lamius [reload | chunksendlimit]";
         this.setPermission("bukkit.command.Lamius");
     }
 
     @Override
     public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
         if (args.length <= 1)
-            return CommandAbstract.getListMatchingLast(args, "reload");
+            return CommandAbstract.getListMatchingLast(args, "reload", "chunksendlimit");
         return Collections.emptyList();
     }
 
@@ -41,6 +43,9 @@ public class LamiusCommand extends Command {
             case "reload":
                 doReload(sender);
                 break;
+            case "chunksendlimit":
+                chunkSendLimit(sender, args);
+                break;
             default:
                 sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
                 return false;
@@ -58,4 +63,24 @@ public class LamiusCommand extends Command {
 
         Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Lamius config reload complete.");
     }
+
+    private void chunkSendLimit(CommandSender sender, String[] args) {
+        if (!(sender instanceof Player)) {
+            sender.sendMessage(ChatColor.RED + "This command is only for players.");
+            return;
+        }
+        if (args.length < 2) {
+            sender.sendMessage(ChatColor.RED + "You should enter a new limit.");
+            return;
+        }
+
+        try {
+            int limit = Integer.parseInt(args[1]);
+            ((CraftPlayer) sender).getHandle().setChunkSendLimit(limit);
+
+            sender.sendMessage(ChatColor.GREEN + "The chunk send limit was successfully set.");
+        } catch (NumberFormatException e) {
+            sender.sendMessage(ChatColor.RED + "You have to enter a number.");
+        }
+    }
 }
diff --git a/src/main/java/this/core/lamius/Lamius/LamiusConfig.java b/src/main/java/this/core/lamius/Lamius/LamiusConfig.java
index 2451fd9be55fd143150e67682167ec4e2cdae4e0..92637c77c1cf9e2f4647b4fb4a0d53bc6ca87909 100644
--- a/src/main/java/this/core/lamius/Lamius/LamiusConfig.java
+++ b/src/main/java/this/core/lamius/Lamius/LamiusConfig.java
@@ -1,6 +1,9 @@
 package this.core.lamius.Lamius;
 
 import com.google.common.base.Throwables;
+import net.minecraft.server.DispenserRegistry;
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.MathHelper;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.command.Command;
@@ -135,4 +138,28 @@ public class LamiusConfig {
         portalTravelCacheLife = 20 * getInt("portal-travel.cache-life", 15);
         portalTravelInstantExpire = getBoolean("portal-travel.instant-expire", false);
     }
+
+    public static boolean delayedChunksEnabled;
+    public static int delayedChunksLimit;
+    private static void delayedChunks() {
+        boolean prevEnabled = delayedChunksEnabled;
+        delayedChunksEnabled = getBoolean("delayed-chunks.enabled", false);
+        delayedChunksLimit = MathHelper.clamp(getInt("delayed-chunks.limit", 4), 1, Integer.MAX_VALUE);
+        if (!delayedChunksEnabled) delayedChunksLimit = 0;
+
+        if (prevEnabled == delayedChunksEnabled) return;
+        if (!DispenserRegistry.a()) return; // If the server has not yet been initialized
+        List<EntityPlayer> players = MinecraftServer.getServer().getPlayerList().players;
+        if (!delayedChunksEnabled) {
+            delayedChunksEnabled = true;
+            for (EntityPlayer player : players) {
+                player.chunkSendLimitLeft = Integer.MAX_VALUE;
+                player.sendDelayedChunks();
+            }
+            delayedChunksEnabled = false;
+        }
+        for (EntityPlayer player : players) {
+            player.initDelayedChunksList();
+        }
+    }
 }
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 96814759247c24370a4ce890c784e6fa7cc05006..4be43502ba35fe8b45ac4a69f55691b510917de3 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -89,6 +89,60 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public boolean queueHealthUpdatePacket = false;
     public net.minecraft.server.PacketPlayOutUpdateHealth queuedHealthUpdatePacket;
     // Paper end
+    // Lamius start - Delayed chunks
+    private List<ChunkCoordIntPair> delayedChunks; public List<ChunkCoordIntPair> getDelayedChunks() { return delayedChunks; }
+    private int chunkSendLimit;
+    public int chunkSendLimitLeft;
+
+    void addDelayedChunk(int x, int z) {
+        PlayerChunk chunk = ((WorldServer) world).getPlayerChunkMap().getChunk(x, z);
+        if (chunk != null && chunk.d(this)) return; // If the player is already added to this chunk
+
+        ChunkCoordIntPair chunkCoord = new ChunkCoordIntPair(x, z);
+        if (!delayedChunks.contains(chunkCoord)) {
+            delayedChunks.add(chunkCoord);
+        }
+    }
+
+    boolean removeDelayedChunk(int x, int z) {
+        return delayedChunks.remove(new ChunkCoordIntPair(x, z));
+    }
+
+    void resortDelayedChunks() {
+        delayedChunks.sort(new PlayerChunkMap.ChunkCoordComparator(this).reversed());
+    }
+
+    public void sendDelayedChunks() {
+        if (chunkSendLimitLeft <= 0 || playerConnection.isDisconnected()) return;
+        List<ChunkCoordIntPair> chunks = delayedChunks;
+        while (!chunks.isEmpty()) {
+            ChunkCoordIntPair chunk = chunks.remove(chunks.size() - 1);
+            if (((WorldServer) world).getPlayerChunkMap().c(chunk.x, chunk.z).addPlayerIfNotAdded(this)) {
+                if (--chunkSendLimitLeft <= 0) break;
+            }
+        }
+    }
+
+    public void initDelayedChunksList() {
+        if (this.core.lamius.Lamius.LamiusConfig.delayedChunksEnabled) {
+            delayedChunks = new ArrayList<>();
+            chunkSendLimit = this.core.lamius.Lamius.LamiusConfig.delayedChunksLimit;
+        } else {
+            delayedChunks = null;
+            chunkSendLimitLeft = 0;
+            chunkSendLimit = 0;
+        }
+    }
+
+    public int getChunkSendLimit() {
+        return chunkSendLimit;
+    }
+
+    public void setChunkSendLimit(int limit) {
+        if (!this.core.lamius.Lamius.LamiusConfig.delayedChunksEnabled) return;
+        this.chunkSendLimit = limit > 0 ? limit : 1;
+    }
+    // Lamius end
 
     // CraftBukkit start
     public String displayName;
@@ -126,6 +180,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.canPickUpLoot = true;
         this.maxHealthCache = this.getMaxHealth();
         // CraftBukkit end
+        initDelayedChunksList(); // Lamius - Delayed chunks
     }
 
     public final BlockPosition getSpawnPoint(MinecraftServer minecraftserver, WorldServer worldserver) {
@@ -422,6 +477,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 this.oldLevel = this.expLevel;
             }
             // CraftBukkit end
+            // Lamius start - Delayed chunks
+            sendDelayedChunks();
+            this.chunkSendLimitLeft = this.chunkSendLimit;
+            // Lamius end
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Ticking player");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Player being ticked");
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 01c29a59d77c205bb31a5c90242eabc2f6b27303..8f3fd88f52494bd4e949f209735dae20ca032957 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -511,7 +511,8 @@ public class EntityTrackerEntry {
         // Lamius end
         int i = Math.min(this.e, this.core.lamius.Lamius.LamiusConfig.dynamicViewDistance ? entityplayer.getFurthestViewableBlock() : this.f); // Lamius - Dynamic view distance
 
-        return d0 >= (double) (-i) && d0 <= (double) i && d1 >= (double) (-i) && d1 <= (double) i && this.tracker.a(entityplayer);
+        return d0 >= (double) (-i) && d0 <= (double) i && d1 >= (double) (-i) && d1 <= (double) i && this.tracker.a(entityplayer)
+                && (!this.core.lamius.Lamius.LamiusConfig.delayedChunksEnabled || !entityplayer.getDelayedChunks().contains(new ChunkCoordIntPair(this.tracker.ab, this.tracker.ad))); // Lamius - Delayed chunks
     }
 
     private boolean e(EntityPlayer entityplayer) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index e8d7d710774e80d1316ac207e3b5ab388e16670b..54fd5f22e564ef3093e74a0b62fe1072e6c9340a 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -81,6 +81,24 @@ public class PlayerChunk {
         }
     }
 
+    // Lamius start
+    public boolean addPlayerIfNotAdded(EntityPlayer player) {
+        if (this.c.contains(player)) return false;
+
+        if (this.c.isEmpty()) {
+            this.i = this.playerChunkMap.getWorld().getTime();
+        }
+
+        this.c.add(player);
+
+        if (this.done) {
+            this.sendChunk(player);
+        }
+
+        return true;
+    }
+    // Lamius end
+
     public void b(EntityPlayer entityplayer) {
         if (this.c.contains(entityplayer)) {
             // CraftBukkit start - If we haven't loaded yet don't load the chunk just so we can clean it up
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 3157d9c15d5a4598f8a4cdcc03ad2dda4350b9ac..4c2ac3081d7f1770b46ea436f73a4c44506a7bbf 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -245,7 +245,7 @@ public class PlayerChunkMap {
         return (PlayerChunk) this.e.get(d(i, j));
     }
 
-    private PlayerChunk c(int i, int j) {
+    protected PlayerChunk c(int i, int j) { // Lamius - private -> protected
         long k = d(i, j);
         PlayerChunk playerchunk = (PlayerChunk) this.e.get(k);
 
@@ -306,10 +306,21 @@ public class PlayerChunkMap {
             }
         }
 
+        // Lamius start - Delayed chunks
+        if (this.core.lamius.Lamius.LamiusConfig.delayedChunksEnabled) {
+            for (int h = 0; h < chunkList.size(); h++) {
+                ChunkCoordIntPair pair = chunkList.get(h);
+                entityplayer.addDelayedChunk(pair.x, pair.z);
+            }
+            entityplayer.resortDelayedChunks();
+            entityplayer.sendDelayedChunks();
+        } else {
         chunkList.sort(new ChunkCoordComparator(entityplayer)); // Lamius - Optimize
         for (ChunkCoordIntPair pair : chunkList) {
             this.c(pair.x, pair.z).a(entityplayer);
         }
+        }
+        // Lamius end
         // CraftBukkit end
 
         this.managedPlayers.add(entityplayer);
@@ -325,6 +336,7 @@ public class PlayerChunkMap {
         for (int k = i - viewDistance; k <= i + viewDistance; ++k) {
             for (int l = j - viewDistance; l <= j + viewDistance; ++l) {
                 // Paper end
+                if (this.core.lamius.Lamius.LamiusConfig.delayedChunksEnabled && entityplayer.removeDelayedChunk(k, l)) continue; // Lamius - Delayed chunks
                 PlayerChunk playerchunk = this.getChunk(k, l);
 
                 if (playerchunk != null) {
@@ -370,8 +382,13 @@ public class PlayerChunkMap {
                             chunksToLoad.add(new ChunkCoordIntPair(l1, i2)); // CraftBukkit
                         }
 
-                        if (!this.a(l1 - j1, i2 - k1, i, j, i1)) {
-                            PlayerChunk playerchunk = this.getChunk(l1 - j1, i2 - k1);
+                        // Lamius start - Delayed chunks
+                        int x = l1 - j1;
+                        int z = i2 - k1;
+                        if (!this.a(x, z, i, j, i1)) {
+                            if (this.core.lamius.Lamius.LamiusConfig.delayedChunksEnabled && entityplayer.removeDelayedChunk(x, z)) continue;
+                            PlayerChunk playerchunk = this.getChunk(x, z);
+                            // Lamius end
 
                             if (playerchunk != null) {
                                 playerchunk.b(entityplayer);
@@ -383,6 +400,17 @@ public class PlayerChunkMap {
                 entityplayer.d = entityplayer.locX;
                 entityplayer.e = entityplayer.locZ;
                 this.e();
+                // Lamius start - Delayed chunks
+                if (this.core.lamius.Lamius.LamiusConfig.delayedChunksEnabled) {
+                    for (int h = 0; h < chunksToLoad.size(); h++) {
+                        ChunkCoordIntPair pair = chunksToLoad.get(h);
+                        entityplayer.addDelayedChunk(pair.x, pair.z);
+                    }
+                    entityplayer.resortDelayedChunks();
+                    entityplayer.sendDelayedChunks();
+                    return;
+                }
+                // Lamius end
 
                 // CraftBukkit start - send nearest chunks first
                 chunksToLoad.sort(new ChunkCoordComparator(entityplayer)); // Lamius - Optimize
@@ -436,10 +464,17 @@ public class PlayerChunkMap {
             // Lamius end
             int i1;
             int j1;
+            boolean delayedChunksEnabled = this.core.lamius.Lamius.LamiusConfig.delayedChunksEnabled; // Lamius
 
             if (j > 0) {
                 for (i1 = k - i; i1 <= k + i; ++i1) {
                     for (j1 = l - i; j1 <= l + i; ++j1) {
+                        // Lamius start - Delayed chunks
+                        if (delayedChunksEnabled) {
+                            entityplayer.addDelayedChunk(i1, j1);
+                            continue;
+                        }
+                        // Lamius end
                         PlayerChunk playerchunk = this.c(i1, j1);
 
                         if (!playerchunk.d(entityplayer)) {
@@ -447,14 +482,27 @@ public class PlayerChunkMap {
                         }
                     }
                 }
+                // Lamius start - Delayed chunks
+                if (delayedChunksEnabled) {
+                    entityplayer.resortDelayedChunks();
+                    entityplayer.sendDelayedChunks();
+                }
+                // Lamius end
             } else {
                 for (i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
                     for (j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
                         if (!this.a(i1, j1, k, l, i)) {
+                            if (delayedChunksEnabled && entityplayer.removeDelayedChunk(i1, j1)) continue; // Lamius - Delayed chunks
                             PlayerChunk chunk = this.getChunk(i1, j1); if (chunk != null) chunk.b(entityplayer); // Lamius - Fix memory leak
                         }
                     }
                 }
+                // Lamius start - Delayed chunks
+                if (delayedChunksEnabled) {
+                    entityplayer.resortDelayedChunks();
+                    entityplayer.sendDelayedChunks();
+                }
+                // Lamius end
                 if (markSort) {
                     this.e();
                 }
@@ -507,7 +555,7 @@ public class PlayerChunkMap {
     }
 
     // CraftBukkit start - Sorter to load nearby chunks first
-    private static class ChunkCoordComparator implements java.util.Comparator<ChunkCoordIntPair> {
+    protected static class ChunkCoordComparator implements java.util.Comparator<ChunkCoordIntPair> { // Lamius - private -> protected
         private int x;
         private int z;
 
