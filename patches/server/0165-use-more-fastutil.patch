From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoftikLord <dimap9986@gmail.com>
Date: Fri, 31 Mar 2023 14:05:18 +0500
Subject: [PATCH] use-more-fastutil

Credits to Dionysus:
https://github.com/nopjmp/Dionysus/blob/dev/patches/server/0034-Use-more-fastutil-data-structures.patch
https://github.com/nopjmp/Dionysus/blob/dev/patches/server/0149-Use-fastutil-for-entitytracker.patch


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 3b39e770d11f9b514dd96a2d58a37c2c35df940e..297626df77c24834f268c815bc7ba59bd5aaa1b1 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -13,6 +13,8 @@ import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -84,7 +86,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     private static int entityCount = 1; // Paper - MC-111480 - ID 0 is treated as special for DataWatchers, start 1
     private int id;
     public boolean i; public boolean blocksEntitySpawning() { return i; } // Paper - OBFHELPER
-    public final List<Entity> passengers;
+    public final ObjectArrayList<Entity> passengers; // Dionysus
     protected int j;
     private Entity au;public void setVehicle(Entity entity) { this.au = entity; } // Paper // OBFHELPER
     public boolean attachedToPlayer;
@@ -219,7 +221,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     public Entity(World world) {
         this.id = Entity.entityCount++;
-        this.passengers = Lists.newArrayList();
+        this.passengers = new ObjectArrayList<>(); // Dionysus
         this.boundingBox = Entity.c;
         this.blockPos = BlockPosition.ZERO; // Lamius - Cache current block pos
         this.width = 0.6F;
@@ -2936,7 +2938,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     public int getPassengersAmount() { return this.passengers.size(); }
     // Lamius end
     public List<Entity> bF() {
-        return (List) (this.passengers.isEmpty() ? Collections.emptyList() : Lists.newArrayList(this.passengers));
+        return (List) (this.passengers.isEmpty() ? Collections.emptyList() : new ObjectArrayList<>(this.passengers)); // Dionysus
     }
 
     public boolean w(Entity entity) {
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 3224b2bc3a85bd032230bfa300ac4c596783cff4..8ea8c9afadc2bedf44c56882c1884bd403a5388f 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 // CraftBukkit start
+import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
+
 import java.net.InetAddress;
 import java.util.HashMap;
 // CraftBukkit end
@@ -9,7 +11,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
 
     private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot
     // CraftBukkit start - add fields
-    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+    private static final Object2LongOpenHashMap<InetAddress> throttleTracker = new Object2LongOpenHashMap<>();
     private static int throttleCounter = 0;
     // CraftBukkit end
 
@@ -37,7 +39,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 synchronized (throttleTracker) {
                     // Lamius start - Optimize map get
                     Long throttleO = throttleTracker.get(address);
-                    if (throttleO != null && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleO < connectionThrottle) {
+                    if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.getLong(address) < connectionThrottle) {
                         // Lamius end
                         throttleTracker.put(address, currentTime);
                         chatmessage = new ChatMessage("Connection throttled! Please wait before reconnecting.");
@@ -53,12 +55,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
 
                         // Cleanup stale entries
                         java.util.Iterator iter = throttleTracker.entrySet().iterator();
-                        while (iter.hasNext()) {
-                            java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
-                            if (entry.getValue() > connectionThrottle) {
-                                iter.remove();
-                            }
-                        }
+                        throttleTracker.object2LongEntrySet().removeIf(entry -> entry.getLongValue() > connectionThrottle); // Dionysus
                     }
                 }
             } catch (Throwable t) {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index a504eff47f02289c4c8a8f1fad18260f81bd5b1a..b8b4d12b4c2fe5dfaafe9346042fb685f1d59d1d 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -75,8 +75,20 @@ public abstract class PlayerList {
     private int v;
 
     // CraftBukkit start
-    private CraftServer cserver;
-    private final Map<String,EntityPlayer> playersByName = new org.spigotmc.CaseInsensitiveMap<EntityPlayer>();
+    private final CraftServer cserver;
+    private final Map<String,EntityPlayer> playersByName = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenCustomHashMap<String, EntityPlayer>(
+            new it.unimi.dsi.fastutil.Hash.Strategy<String>() {
+                @Override
+                public int hashCode(String o) {
+                    return o.toLowerCase().hashCode();
+                }
+
+                @Override
+                public boolean equals(String a, String b) {
+                    return a.equalsIgnoreCase(b);
+                }
+            }
+    );
     @Nullable String collideRuleTeamName; // Paper - Team name used for collideRule
 
     public PlayerList(MinecraftServer minecraftserver) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 04bbd988b6bd3eed75befedaecd3173b123320bb..856586d2ff0e6c4d887958bd3740580e88254805 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -311,19 +311,22 @@ class CraftMetaItem implements ItemMeta, Repairable {
             NBTTagList nbttaglist = tag.getList(ATTRIBUTES.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND);
 
             // Spigot start
-            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTracker = new gnu.trove.map.hash.TObjectDoubleHashMap<String>();
-            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTrackerX = new gnu.trove.map.hash.TObjectDoubleHashMap<String>();
-            Map<String, IAttribute> attributesByName = new HashMap<String, IAttribute>();
+            // Dionysus - use fastutil instead of trove
+            it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> attributeTracker = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String>();
+            it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> attributeTrackerX = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String>();
+            final Map<String, IAttribute> attributesByName = ImmutableMap.of(
+                    "generic.maxHealth", GenericAttributes.maxHealth,
+                    "generic.followRange", GenericAttributes.FOLLOW_RANGE,
+                    "generic.knockbackResistance", GenericAttributes.c,
+                    "generic.movementSpeed", GenericAttributes.MOVEMENT_SPEED,
+                    "generic.attackDamage", GenericAttributes.ATTACK_DAMAGE
+            );
             attributeTracker.put( "generic.maxHealth", 20.0 );
-            attributesByName.put( "generic.maxHealth", GenericAttributes.maxHealth );
             attributeTracker.put( "generic.followRange", 32.0 );
-            attributesByName.put( "generic.followRange", GenericAttributes.FOLLOW_RANGE );
             attributeTracker.put( "generic.knockbackResistance", 0.0 );
-            attributesByName.put( "generic.knockbackResistance", GenericAttributes.c );
             attributeTracker.put( "generic.movementSpeed", 0.7 );
-            attributesByName.put( "generic.movementSpeed", GenericAttributes.MOVEMENT_SPEED );
             attributeTracker.put( "generic.attackDamage", 1.0 );
-            attributesByName.put( "generic.attackDamage", GenericAttributes.ATTACK_DAMAGE );
+            // Dionysus end
             NBTTagList oldList = nbttaglist;
             nbttaglist = new NBTTagList();
 
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 2cdd9aaf81c792bac9477b2296d67860bcbc387f..8bf0fb4abeb5f41558e81bd916a5e0323580d824 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -14,6 +14,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
 import gnu.trove.map.hash.TObjectIntHashMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import net.minecraft.server.AttributeRanged;
 import net.minecraft.server.GenericAttributes;
 import net.minecraft.server.MinecraftServer;
@@ -249,7 +250,7 @@ public class SpigotConfig
     }
 
     public static boolean disableStatSaving;
-    public static TObjectIntHashMap<String> forcedStats = new TObjectIntHashMap<String>();
+    public static Object2IntOpenHashMap<String> forcedStats = new Object2IntOpenHashMap<String>();
     private static void stats()
     {
         disableStatSaving = getBoolean( "stats.disable-saving", false );
