From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ruViolence <78062896+ruviolence@users.noreply.github.com>
Date: Thu, 26 May 2022 10:09:56 +0500
Subject: [PATCH] perf: use MethodHandle for the MaterialData


diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index b43bc24376be6acc562a26b05c0228225f46d7b4..0d6cfe3d84f7c703454a0b0f403b2ac04ef83ebc 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -1,5 +1,7 @@
 package org.bukkit;
 
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Constructor;
 import java.util.Arrays;
 import java.util.Map;
@@ -544,6 +546,10 @@ public enum Material {
     private final static Map<String, Material> BY_NAME = Maps.newHashMap();
     private final int maxStack;
     private final short durability;
+    // Lamius start - Optimize data instantiation
+    private final Class<? extends MaterialData> dataClass;
+    private final MethodHandle ctorMh;
+    // Lamius end
 
     private Material(final int id) {
         this(id, 64);
@@ -572,8 +578,13 @@ public enum Material {
         // try to cache the constructor for this material
         try {
             this.ctor = data.getConstructor(int.class, byte.class);
+            // Lamius start - Optimize data instantiation
+            this.ctorMh = MethodHandles.lookup().unreflectConstructor(ctor);
+            this.dataClass = ctor.getDeclaringClass();
+            // Lamius end
         } catch (NoSuchMethodException ex) {
             throw new AssertionError(ex);
+        } catch (IllegalAccessException ex) {throw new AssertionError(ex); // Lamius
         } catch (SecurityException ex) {
             throw new AssertionError(ex);
         }
@@ -614,7 +625,7 @@ public enum Material {
      * @return MaterialData associated with this Material
      */
     public Class<? extends MaterialData> getData() {
-        return ctor.getDeclaringClass();
+        return dataClass; // Lamius - Optimize data instantiation
     }
 
     /**
@@ -628,7 +639,7 @@ public enum Material {
     @Deprecated
     public MaterialData getNewData(final byte raw) {
         try {
-            return ctor.newInstance(id, raw);
+            return (MaterialData) ctorMh.invoke(id, raw); // Lamius - Optimize data instantiation
         } catch (InstantiationException ex) {
             final Throwable t = ex.getCause();
             if (t instanceof RuntimeException) {
